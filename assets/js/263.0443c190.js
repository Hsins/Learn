(window.webpackJsonp=window.webpackJsonp||[]).push([[263],{643:function(t,a,e){"use strict";e.r(a);var n=e(8),s=Object(n.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"execution-contexts-and-lexical-environments"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#execution-contexts-and-lexical-environments"}},[t._v("#")]),t._v(" Execution Contexts and Lexical Environments")]),t._v(" "),e("h2",{attrs:{id:"syntax-parsers-execution-contexts-and-lexical-environments"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#syntax-parsers-execution-contexts-and-lexical-environments"}},[t._v("#")]),t._v(" Syntax Parsers, Execution Contexts and Lexical Environments")]),t._v(" "),e("h3",{attrs:{id:"語法解析器-syntax-parsers"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#語法解析器-syntax-parsers"}},[t._v("#")]),t._v(" 語法解析器（Syntax Parsers）")]),t._v(" "),e("p",[e("strong",[t._v("語法解析器（Syntax Parsers）")]),t._v(" 能夠逐字元地讀取程式碼，檢查其合法性並決定這些標記（token）必須執行的指令。換句話說，在一門程式語言中所規定的語法是否有效，以及他要做些什麼都會交由語法解析器來決定。所有的程式碼都必須經過編譯器或直譯器進行解析，轉換為實際在電腦上所執行的指令。")]),t._v(" "),e("div",{staticClass:"callout"},[e("p",{staticClass:"title"},[t._v("💡 詞法分析（lexical analysis）")]),e("p",[t._v("實際上這裡的內容涉及到了編譯器原理的內容，編譯器會先透過詞彙分析（lexical analysis）來將程式碼轉換為一個個標記（token）所組成的序列，這些標記是構成程式碼的基本單位。")]),t._v(" "),e("p",[t._v("比如說 "),e("code",[t._v("let my_num = 7")]),t._v(" 會將他分解成 "),e("code",[t._v("let")]),t._v("、"),e("code",[t._v("my_num")]),t._v("｀"),e("code",[t._v("=")]),t._v(" 和 "),e("code",[t._v("7")]),t._v(" 這些標記，接著才是透過語法解析器（Syntax Parser）來將這些標記組合成有意義的句子。")])]),e("h3",{attrs:{id:"詞彙環境-lexical-environments"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#詞彙環境-lexical-environments"}},[t._v("#")]),t._v(" 詞彙環境（Lexical Environments）")]),t._v(" "),e("p",[e("strong",[t._v("詞彙環境（Lexical Environments）")]),t._v(" 和程式碼的結構互相對應，指的是程式碼在程式中實際的位置，在撰寫程式碼的時候就決定了詞彙環境。當 JavaScript 的語法解析器在解讀並轉換程式碼時，會根據變數、函式所在的詞彙環境不同，影響到程式碼在記憶體中的位置與其他變數、函式之間的關係。")]),t._v(" "),e("div",{staticClass:"callout"},[e("p",{staticClass:"title"},[t._v("💡 詞彙環境與程式碼的對應")]),e("p",[t._v("詞彙環境和四種類型的程式碼結構互相對應：")]),t._v(" "),e("ul",[e("li",[t._v("全局代碼（global code）")]),t._v(" "),e("li",[t._v("函數代碼（function code）")]),t._v(" "),e("li",[e("code",[t._v("eval")]),t._v(" 代碼（eval code）")]),t._v(" "),e("li",[e("code",[t._v("with")]),t._v(" 區塊（with block）")]),t._v(" "),e("li",[e("code",[t._v("catch")]),t._v(" 區塊（catch block）")])]),t._v(" "),e("p",[t._v("關於這部分如果並不是很理解，可以參考這篇 "),e("a",{attrs:{href:"https://juejin.im/post/5c05120be51d4513416d2111",target:"_blank",rel:"noopener noreferrer"}},[t._v("彻底搞懂 JavaScript - 詞法環境（Lexical Environments）")]),t._v("。")])]),e("h3",{attrs:{id:"執行上下文-execution-contexts"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#執行上下文-execution-contexts"}},[t._v("#")]),t._v(" 執行上下文（Execution Contexts）")]),t._v(" "),e("p",[t._v("在一段程式碼中，存在有許多個詞彙環境，決定其執行順序的就是所謂的 "),e("strong",[t._v("執行上下文（Execution Contexts）")]),t._v("。")]),t._v(" "),e("h2",{attrs:{id:"name-value-pairs-and-objects"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#name-value-pairs-and-objects"}},[t._v("#")]),t._v(" Name/Value Pairs and Objects")]),t._v(" "),e("p",[t._v("在 JavaScript 中，所謂的 "),e("strong",[t._v("物件（object）")]),t._v(" 就是存放著許多由鍵值對的集合，除此之外，物件中可以嵌套其他物件。比如：")]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  Street"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Main'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  Number"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  Apartment"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    Floor"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    Number"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("301")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("h2",{attrs:{id:"note-the-global-environment-and-the-global-object"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#note-the-global-environment-and-the-global-object"}},[t._v("#")]),t._v(" [Note] The Global Environment and The Global Object")]),t._v(" "),e("p",[t._v("在 JavaScript 中有三種執行環境類型：全域環境（Global Environment）、函數環境（Function Environment）與 Eval 函數環境（Eval Function Environment）。其中當執行 JavaScript 程式碼時，所建立的基礎執行環境就是全域環境，在創建全域環境的同時會自動創建：")]),t._v(" "),e("ul",[e("li",[t._v("全域物件（global object）：不屬於函數之內的物件，就是全域物件。")]),t._v(" "),e("li",[e("code",[t._v("this")]),t._v(" 變數")])]),t._v(" "),e("p",[t._v("對於瀏覽器來說，JavaScript 程式碼執行時所創建的全域物件將會是視窗 "),e("code",[t._v("windows")]),t._v("，而此時的 "),e("code",[t._v("this")]),t._v(" 變數將會等價於 "),e("code",[t._v("windows")]),t._v("。")]),t._v(" "),e("h2",{attrs:{id:"note-hoisting"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#note-hoisting"}},[t._v("#")]),t._v(" [Note] Hoisting")]),t._v(" "),e("p",[t._v("在下面的程式碼中，雖然函數 "),e("code",[t._v("b()")]),t._v(" 的宣告在呼叫之後，但卻能夠在宣告之前進行呼叫，而變數 "),e("code",[t._v("a")]),t._v(" 在宣告之前使用卻會是 "),e("code",[t._v("undefined")]),t._v("（若沒有宣告 "),e("code",[t._v("a")]),t._v(" 則會出現警告 "),e("code",[t._v("a is not defined")]),t._v("），這樣的現象稱為 "),e("strong",[t._v("提升（Hoisting）")]),t._v("：")]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("b")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'Called b!'")]),t._v("\nconsole"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// undefined")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Hello World!'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("b")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Call b!'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("使用 "),e("strong",[t._v("提升（Hoisting）")]),t._v(" 這樣的說法可能會造成一種誤會，好似程式碼在進行解釋時會先將宣告挪至所有程式碼之前執行，但實際上的狀況並非如此。原因在於執行環境創建時會分成兩部分，第一部分稱為創造（Creation）部分，會替變數和函數在記憶體中建立空間，但針對函數與變數略有差異：")]),t._v(" "),e("ul",[e("li",[t._v("函數：將函數所有內容放入記憶體中。")]),t._v(" "),e("li",[t._v("變數：在使用等號賦值的狀況下，先替變數創建記憶體空間，此時所有變數都會被設定為 "),e("code",[t._v("undefined")]),t._v("，接著再依執行順序進行賦值。")])]),t._v(" "),e("h2",{attrs:{id:"note-the-keyword-undefined"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#note-the-keyword-undefined"}},[t._v("#")]),t._v(" [Note] The Keyword "),e("code",[t._v("undefined")])]),t._v(" "),e("h2",{attrs:{id:"note-the-execution-context-code-execution"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#note-the-execution-context-code-execution"}},[t._v("#")]),t._v(" [Note] The Execution Context - Code Execution")]),t._v(" "),e("h2",{attrs:{id:"note-conceptual-aside-single-threaded-synchronous-execution"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#note-conceptual-aside-single-threaded-synchronous-execution"}},[t._v("#")]),t._v(" [Note] Conceptual Aside: Single Threaded, Synchronous Execution")]),t._v(" "),e("h2",{attrs:{id:"note-function-invocation-and-the-execution-stack"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#note-function-invocation-and-the-execution-stack"}},[t._v("#")]),t._v(" [Note] Function Invocation and the Execution Stack")]),t._v(" "),e("h2",{attrs:{id:"note-functions-context-and-variable-environments"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#note-functions-context-and-variable-environments"}},[t._v("#")]),t._v(" [Note] Functions, Context and Variable Environments")]),t._v(" "),e("h2",{attrs:{id:"note-the-scope-chain"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#note-the-scope-chain"}},[t._v("#")]),t._v(" [Note] The Scope Chain")]),t._v(" "),e("h2",{attrs:{id:"note-scope-es6-and-let"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#note-scope-es6-and-let"}},[t._v("#")]),t._v(" [Note] Scope, ES6 and let")]),t._v(" "),e("h2",{attrs:{id:"note-what-about-asynchronous-callbacks"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#note-what-about-asynchronous-callbacks"}},[t._v("#")]),t._v(" [Note] What About Asynchronous Callbacks?")])])}),[],!1,null,null,null);a.default=s.exports}}]);