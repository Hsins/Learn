(window.webpackJsonp=window.webpackJsonp||[]).push([[158],{537:function(a,t,e){"use strict";e.r(t);var s=e(8),r=Object(s.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"trees"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#trees"}},[a._v("#")]),a._v(" Trees")]),a._v(" "),e("h2",{attrs:{id:"what-are-trees"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#what-are-trees"}},[a._v("#")]),a._v(" What are Trees?")]),a._v(" "),e("p",[a._v("樹結構")]),a._v(" "),e("ul",[e("li",[e("p",[a._v("Trees are Hierarchical data structure")])]),a._v(" "),e("li",[e("p",[a._v("Node")])]),a._v(" "),e("li",[e("p",[a._v("Child")])]),a._v(" "),e("li",[e("p",[a._v("Parent")])]),a._v(" "),e("li",[e("p",[a._v("Edge")])]),a._v(" "),e("li",[e("p",[a._v("Leaf")])]),a._v(" "),e("li",[e("p",[a._v("Subtree")])]),a._v(" "),e("li",[e("p",[a._v("Every item in the tree is a node")])]),a._v(" "),e("li",[e("p",[a._v("The node at the top of the tree is the root")])]),a._v(" "),e("li",[e("p",[a._v("Every non-root node has one and only one parent")])]),a._v(" "),e("li",[e("p",[a._v("A leaf node has no children")])]),a._v(" "),e("li",[e("p",[a._v("A singleton tree has only one node: the root")])])]),a._v(" "),e("h2",{attrs:{id:"binary-search-trees"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#binary-search-trees"}},[a._v("#")]),a._v(" Binary Search Trees")]),a._v(" "),e("ul",[e("li",[a._v("Every node has 0, 1, or 2 children")]),a._v(" "),e("li",[a._v("Children are referred to as left child and right child")]),a._v(" "),e("li",[a._v("Can perform insertions, deletions and retrievals in "),e("span",{staticClass:"katex"},[e("span",{staticClass:"katex-mathml"},[e("math",[e("semantics",[e("mrow",[e("mi",[a._v("O")]),e("mo",{attrs:{stretchy:"false"}},[a._v("(")]),e("mi",[a._v("log")]),e("mo",[a._v("⁡")]),e("mi",[a._v("n")]),e("mo",{attrs:{stretchy:"false"}},[a._v(")")])],1),e("annotation",{attrs:{encoding:"application/x-tex"}},[a._v("O(\\log{n})")])],1)],1)],1),e("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[e("span",{staticClass:"base"},[e("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),e("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.02778em"}},[a._v("O")]),e("span",{staticClass:"mopen"},[a._v("(")]),e("span",{staticClass:"mop"},[a._v("lo"),e("span",{staticStyle:{"margin-right":"0.01389em"}},[a._v("g")])]),e("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.16666666666666666em"}}),e("span",{staticClass:"mord"},[e("span",{staticClass:"mord mathdefault"},[a._v("n")])]),e("span",{staticClass:"mclose"},[a._v(")")])])])]),a._v(" time")]),a._v(" "),e("li",[a._v("The left child always has a smaller value than its parent")]),a._v(" "),e("li",[a._v("The right child always has a larger value than its parent")])]),a._v(" "),e("h2",{attrs:{id:"binary-search-trees-implementation"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#binary-search-trees-implementation"}},[a._v("#")]),a._v(" Binary Search Trees Implementation")]),a._v(" "),e("h2",{attrs:{id:"challenge-01"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#challenge-01"}},[a._v("#")]),a._v(" Challenge 01")]),a._v(" "),e("h2",{attrs:{id:"challenge-01-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#challenge-01-2"}},[a._v("#")]),a._v(" Challenge 01")]),a._v(" "),e("h2",{attrs:{id:"challenge-01-3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#challenge-01-3"}},[a._v("#")]),a._v(" Challenge 01")])])}),[],!1,null,null,null);t.default=r.exports}}]);