(window.webpackJsonp=window.webpackJsonp||[]).push([[373],{754:function(e,t,a){"use strict";a.r(t);var s=a(8),n=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"aggregate-functions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aggregate-functions"}},[e._v("#")]),e._v(" Aggregate Functions")]),e._v(" "),a("h2",{attrs:{id:"lecture-what-is-aggregate-functions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lecture-what-is-aggregate-functions"}},[e._v("#")]),e._v(" [Lecture] What is Aggregate Functions")]),e._v(" "),a("p",[e._v("Aggregate Functions perform a calculations on data within a column and returns one result row. We can use "),a("code",[e._v("GROUP BY")]),e._v(" clauses to group the results by columns. Besides, we can use a "),a("code",[e._v("HAVING")]),e._v(" clause in a similar way to a "),a("code",[e._v("WHERE")]),e._v(" clause in a "),a("code",[e._v("SELECT")]),e._v(" statement to filter the results set. There are the useful aggregate functions below:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("COUNT")])]),e._v(" "),a("li",[a("code",[e._v("SUM")])]),e._v(" "),a("li",[a("code",[e._v("MIN")])]),e._v(" "),a("li",[a("code",[e._v("MAX")])]),e._v(" "),a("li",[a("code",[e._v("AVERAGE")])])])])}),[],!1,null,null,null);t.default=n.exports}}]);