(window.webpackJsonp=window.webpackJsonp||[]).push([[340],{720:function(t,e,n){"use strict";n.r(e);var a=n(8),o=Object(a.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"introduction"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#introduction"}},[t._v("#")]),t._v(" Introduction")]),t._v(" "),n("h2",{attrs:{id:"course-overview"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#course-overview"}},[t._v("#")]),t._v(" Course Overview")]),t._v(" "),n("p",[t._v("這門課主要是關於：")]),t._v(" "),n("ul",[n("li",[t._v("Python 程式語言")]),t._v(" "),n("li",[t._v("Python 內建型別（build-in types）")]),t._v(" "),n("li",[t._v("Python 標準函式庫（standard library）")])]),t._v(" "),n("p",[t._v("請確保使用 Python 3.6 以上的版本。")]),t._v(" "),n("h2",{attrs:{id:"the-zen-of-python"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#the-zen-of-python"}},[t._v("#")]),t._v(" The Zen of Python")]),t._v(" "),n("p",[t._v("在開始這門課之前，我們有必要先了解 Python 這門程式語言。作為 Python 的主要貢獻者之一，軟體工程師 Tim Peters 在 1999 年的郵件列表中發表了所謂的《Python 之禪（The Zen of Python）》，一共包含了十九條影響 Python 程式語言設計的編寫原則，並被收錄於 "),n("a",{attrs:{href:"https://www.python.org/dev/peps/pep-0020/",target:"_blank",rel:"noopener noreferrer"}},[t._v("PEP 20")]),t._v("。")]),t._v(" "),n("p",[t._v("在 Python 的交互式介面中，我們可輸入 "),n("code",[t._v("import this")]),t._v(" 顯示其內容：")]),t._v(" "),n("div",{staticClass:"language-plain extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("The Zen of Python, by Tim Peters\n\nBeautiful is better than ugly.\nExplicit is better than implicit.\nSimple is better than complex.\nComplex is better than complicated.\nFlat is better than nested.\nSparse is better than dense.\nReadability counts.\nSpecial cases aren't special enough to break the rules.\nAlthough practicality beats purity.\nErrors should never pass silently.\nUnless explicitly silenced.\nIn the face of ambiguity, refuse the temptation to guess.\nThere should be one-- and preferably only one --obvious way to do it.\nAlthough that way may not be obvious at first unless you're Dutch.\nNow is better than never.\nAlthough never is often better than *right* now.\nIf the implementation is hard to explain, it's a bad idea.\nIf the implementation is easy to explain, it may be a good idea.\nNamespaces are one honking great idea -- let's do more of those!\n")])])])])}),[],!1,null,null,null);e.default=o.exports}}]);