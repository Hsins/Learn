(window.webpackJsonp=window.webpackJsonp||[]).push([[452],{834:function(e,t,r){"use strict";r.r(t);var s=r(8),a=Object(s.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"deleting-yanking-and-putting"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#deleting-yanking-and-putting"}},[e._v("#")]),e._v(" Deleting, Yanking, and Putting")]),e._v(" "),r("h2",{attrs:{id:"cut-copy-and-paste"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#cut-copy-and-paste"}},[e._v("#")]),e._v(" Cut, Copy and Paste")]),e._v(" "),r("ul",[r("li",[r("kbd",[e._v("d")]),e._v(" and "),r("kbd",[e._v("c")]),e._v(" cut text, not just delete")]),e._v(" "),r("li",[e._v("cut = delete and save into a register")]),e._v(" "),r("li",[e._v("Register is a clipboard-like storage location")])]),e._v(" "),r("p",[e._v("If we cut the line with "),r("kbd",[e._v("dd")]),e._v(" command. This place has the cut text into what vim calls the unnamed register: default register.")]),e._v(" "),r("p",[e._v("unname register == default register")]),e._v(" "),r("p",[e._v("Use "),r("kbd",[e._v("p")]),e._v(" "),r("code",[e._v("put")]),e._v(" command to place that text one the line below where the cursor is.")]),e._v(" "),r("p",[r("kbd",[e._v("ddp")]),e._v(" to swap the line\n"),r("kbd",[e._v("xp")]),e._v(" to swap the character")]),e._v(" "),r("p",[r("kbd",[e._v("p")]),e._v(" puts the text after your cursor\n"),r("kbd",[e._v("P")]),e._v(" puts the text before your cursor")]),e._v(" "),r("p",[e._v("If you just want to copy text and not cut it, use the "),r("kbd",[e._v("y")]),e._v(" "),r("code",[e._v("yank")]),e._v(". You can think yank as copy more accurately text is being yanked into a register")]),e._v(" "),r("p",[e._v("cut = deletel\ncopy = yank\npaste = put")]),e._v(" "),r("p",[r("kbd",[e._v("yw")]),e._v(" puts the text after your cursor\n"),r("kbd",[e._v("y$")]),e._v(" puts the text after your cursor\n"),r("kbd",[e._v("yy")]),e._v(" copy entire line")]),e._v(" "),r("p",[r("kbd",[e._v("u")]),e._v(" undo\n"),r("kbd",[e._v("r")]),e._v(" redo")]),e._v(" "),r("h2",{attrs:{id:"registers"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#registers"}},[e._v("#")]),e._v(" Registers")]),e._v(" "),r("h3",{attrs:{id:"types"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#types"}},[e._v("#")]),e._v(" Types")]),e._v(" "),r("ul",[r("li",[e._v("Unnamed Registers")]),e._v(" "),r("li",[e._v("Numbered Registers")]),e._v(" "),r("li",[e._v("Named Registers")])]),e._v(" "),r("h3",{attrs:{id:"registers-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#registers-2"}},[e._v("#")]),e._v(" Registers")]),e._v(" "),r("p",[e._v("Registers are preceded with a double quite.")]),e._v(" "),r("ul",[r("li",[e._v("Unnamed registers: "),r("code",[e._v('""')])]),e._v(" "),r("li",[e._v("Numbered registers: "),r("code",[e._v('"0"')]),e._v(", "),r("code",[e._v('"1"')]),e._v(", ... "),r("code",[e._v('"9"')])])]),e._v(" "),r("p",[e._v("Note that:")]),e._v(" "),r("ul",[r("li",[r("code",[e._v('""')]),e._v(" holds text from d, c, s, x and y operations")]),e._v(" "),r("li",[r("code",[e._v('"0"')]),e._v(" holds last text yanked (y)")]),e._v(" "),r("li",[r("code",[e._v('"1"')]),e._v(" holds last text deleted (d) or changed (c)")]),e._v(" "),r("li",[e._v("Numbered regisiters shift with each d or c")])]),e._v(" "),r("p",[e._v("Use "),r("code",[e._v(":ref")]),e._v(" to see show registers")]),e._v(" "),r("h3",{attrs:{id:"repeating-with-registers"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#repeating-with-registers"}},[e._v("#")]),e._v(" Repeating with Registers")]),e._v(" "),r("p",[e._v("[count][register]operator\n[register][count]operator")])])}),[],!1,null,null,null);t.default=a.exports}}]);