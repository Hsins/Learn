(window.webpackJsonp=window.webpackJsonp||[]).push([[168],{547:function(e,t,s){"use strict";s.r(t);var a=s(8),r=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"docker-compose-with-multiple-local-containers"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docker-compose-with-multiple-local-containers"}},[e._v("#")]),e._v(" Docker Compose with Multiple Local Containers")]),e._v(" "),s("h2",{attrs:{id:"connect-different-containers"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#connect-different-containers"}},[e._v("#")]),e._v(" Connect Different Containers")]),e._v(" "),s("p",[e._v("在這一小節，我們的目的是創建多個運行 Node.js 的伺服器容器，並存取相同的一個資料庫容器。如果要使當前運行中的不同容器間彼此互相連接，通常會使用 Docker Compose。")]),e._v(" "),s("h2",{attrs:{id:"docker-compose-yaml-file"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docker-compose-yaml-file"}},[e._v("#")]),e._v(" "),s("code",[e._v("docker-compose.yaml")]),e._v(" File")]),e._v(" "),s("p",[e._v("Docker Compose 是一個可以讓你可以透過一個指令就可以控制所有專案中所需要服務的工具，在這之前我們必須先創建一個 YAML 檔案來描述和定義專案中不同服務的運作關係：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("version: '3'\nservices:\n  redis-server:\n    image: 'redis'\n  node-app:\n    build: .\n    ports:\n      - \"4001:8081\"\n")])])]),s("h2",{attrs:{id:"docker-compose-commands"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docker-compose-commands"}},[e._v("#")]),e._v(" Docker Compose Commands")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker run myimage")]),e._v("\n$ docker-compose up\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker build . + docker run myimage")]),e._v("\n$ docker-compose up --build\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Launch in background")]),e._v("\n$ docker-compose up -d\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Stop Containers")]),e._v("\n$ docker-compose down\n")])])]),s("h2",{attrs:{id:"automatic-container-restarts"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#automatic-container-restarts"}},[e._v("#")]),e._v(" Automatic Container Restarts")]),e._v(" "),s("h3",{attrs:{id:"restart-policies"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#restart-policies"}},[e._v("#")]),e._v(" Restart Policies")]),e._v(" "),s("ul",[s("li",[s("code",[e._v('"no"')]),e._v(": Never attempt to restart this container if it stops or crashes.")]),e._v(" "),s("li",[s("code",[e._v("always")]),e._v(": If this containers stops for any reason, always attempt to restart it.")]),e._v(" "),s("li",[s("code",[e._v("on-failure")]),e._v(": Only restart if the container stops with an error code.")]),e._v(" "),s("li",[s("code",[e._v("unless-stopped")]),e._v(": Always restart unless the developers forcibly stop it.")])]),e._v(" "),s("h3",{attrs:{id:"setup-in-yaml-file"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#setup-in-yaml-file"}},[e._v("#")]),e._v(" Setup in YAML File")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("version: '3'\nservices:\n  redis-server:\n    image: 'redis'\n  node-app:\n    restart: 'no'\n    build: .\n    ports:\n      - \"4001:8081\"\n")])])]),s("h2",{attrs:{id:"container-status-with-docker-compose"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#container-status-with-docker-compose"}},[e._v("#")]),e._v(" Container Status with Docker Compose")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("$ docker-compose "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("ps")]),e._v("\n")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);