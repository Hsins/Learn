(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{410:function(a,e,r){"use strict";r.r(e);var t=r(8),s=Object(t.a)({},(function(){var a=this,e=a.$createElement,r=a._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[r("h1",{attrs:{id:"multi-threaded-programming"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#multi-threaded-programming"}},[a._v("#")]),a._v(" Multi-Threaded Programming")]),a._v(" "),r("h2",{attrs:{id:"threads"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#threads"}},[a._v("#")]),a._v(" Threads")]),a._v(" "),r("h3",{attrs:{id:"process-and-thread"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#process-and-thread"}},[a._v("#")]),a._v(" Process and Thread")]),a._v(" "),r("p",[a._v("行程（Process）其實就是只有單一執行緒（single thread）的程式，又稱為重量級行程（WHP, heavyweight process），而執行緒也被稱為是輕量級行程（LWP, lightweight process）；在一個行程內部可以存在有多個執行緒，每個執行緒都是 CPU 的基本使用單元，是作業系統用來進行排程的重要單元，並且有自己的 Thread ID、Program Counter、Register Set 和 Stack Space。下圖是傳統單執行緒行程（single-threaded process）和多執行緒行程（multithreaded process）的比較示意圖：")]),a._v(" "),r("p",[r("img",{attrs:{src:"https://user-images.githubusercontent.com/26391143/91665735-6a222d80-eb2a-11ea-870b-91fe33b5da5c.png",alt:"Single-threaded and Multithreaded processes"}})]),a._v(" "),r("p",[a._v("總地來說，使用多執行緒能夠帶來許多好處，包括較佳的反應速度（responsiveness）、資源共享（resource sharing）以及對多核心處理器來說有著更好的擴展性與使用性。目前有許多程式都使用了多執行緒的設計，比如：")]),a._v(" "),r("ul",[r("li",[a._v("網頁瀏覽器")]),a._v(" "),r("li",[a._v("文書處理軟體")]),a._v(" "),r("li",[a._v("網路應用伺服器")])]),a._v(" "),r("h2",{attrs:{id:"multicore-programming"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#multicore-programming"}},[a._v("#")]),a._v(" Multicore Programming")]),a._v(" "),r("h2",{attrs:{id:"user-level-threads-and-kernel-level-threads"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#user-level-threads-and-kernel-level-threads"}},[a._v("#")]),a._v(" User-Level Threads and Kernel-Level Threads")]),a._v(" "),r("h2",{attrs:{id:"kernel-level-threads"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#kernel-level-threads"}},[a._v("#")]),a._v(" Kernel-Level Threads")]),a._v(" "),r("h2",{attrs:{id:"multithreading-models"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#multithreading-models"}},[a._v("#")]),a._v(" Multithreading Models")]),a._v(" "),r("h2",{attrs:{id:"thread-libraries"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#thread-libraries"}},[a._v("#")]),a._v(" Thread Libraries")]),a._v(" "),r("h2",{attrs:{id:"pthreads"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#pthreads"}},[a._v("#")]),a._v(" Pthreads")]),a._v(" "),r("h2",{attrs:{id:"windows-threads"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#windows-threads"}},[a._v("#")]),a._v(" Windows Threads")]),a._v(" "),r("h2",{attrs:{id:"java"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#java"}},[a._v("#")]),a._v(" Java")]),a._v(" "),r("h2",{attrs:{id:"implicit-threading"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#implicit-threading"}},[a._v("#")]),a._v(" Implicit Threading")]),a._v(" "),r("h2",{attrs:{id:"threading-issues"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#threading-issues"}},[a._v("#")]),a._v(" Threading Issues")]),a._v(" "),r("h2",{attrs:{id:"scheduler-activations"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#scheduler-activations"}},[a._v("#")]),a._v(" Scheduler Activations")]),a._v(" "),r("h2",{attrs:{id:"windows"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#windows"}},[a._v("#")]),a._v(" Windows")]),a._v(" "),r("h2",{attrs:{id:"linux"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#linux"}},[a._v("#")]),a._v(" Linux")])])}),[],!1,null,null,null);e.default=s.exports}}]);